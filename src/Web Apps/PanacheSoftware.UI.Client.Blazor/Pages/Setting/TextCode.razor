@page "/textcode/{id?}"
@attribute [Authorize]
@inject UserAppCache UserAppCache
@inject FoundationService MyFoundationService
@inject TokenProvider TokenProvider
@using PanacheSoftware.Core.Domain.API.Language

<PageProgressBar @ref="@pageProgressBar" pageProgressColor="Color.Warning" pageProgressVisible="@loadingPage" />

@if (!loadingPage)
{
    <Breadcrumb>
        <BreadcrumbItem>
            <BreadcrumbLink To="dashboard">@LanguageHelper.GetTitle(langQueryList, 10121)</BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbItem>
            <BreadcrumbLink To="languages">@LanguageHelper.GetTitle(langQueryList, 10700)</BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbItem Active="true">
            <BreadcrumbLink>@GetBreadCrumbTitle()</BreadcrumbLink>
        </BreadcrumbItem>
    </Breadcrumb>

    @if (languageHead != null)
    {
        <Form>
            <Row>
                <Column>
                    <Card Margin="Margin.Is4.OnY">
                        <CardHeader>
                            <CardTitle>@LanguageHelper.GetTitle(langQueryList, 10701)</CardTitle>
                        </CardHeader>
                        <CardBody>
                            <Validations Mode="ValidationMode.Auto" Model="@languageHead">
                                <Row>
                                    <Column ColumnSize="ColumnSize.Is12">
                                        <Validation>
                                            <Field>
                                                <FieldLabel>@LanguageHelper.GetTitle(langQueryList, 10702)</FieldLabel>
                                                <NumericEdit TValue="long" @bind-Value="languageHead.TextCode" ReadOnly="@textCodeEdit">
                                                    <Feedback>
                                                        <ValidationError />
                                                    </Feedback>
                                                </NumericEdit>
                                            </Field>
                                        </Validation>
                                    </Column>
                                </Row>
                                <Row>
                                    <Column ColumnSize="ColumnSize.Is12">
                                        <Validation>
                                            <Field>
                                                <FieldLabel>@LanguageHelper.GetTitle(langQueryList, 10703)</FieldLabel>
                                                <TextEdit @bind-Text="languageHead.Text" ReadOnly="@textCodeEdit">
                                                    <Feedback>
                                                        <ValidationError />
                                                    </Feedback>
                                                </TextEdit>
                                            </Field>
                                        </Validation>
                                    </Column>
                                </Row>
                                <Row>
                                    <Column ColumnSize="ColumnSize.Is12">
                                        <Validation>
                                            <Field>
                                                <FieldLabel>@LanguageHelper.GetTitle(langQueryList, 10200)</FieldLabel>
                                                <MemoEdit @bind-Text="@languageHead.Description" Rows="5">
                                                    <Feedback>
                                                        <ValidationError />
                                                    </Feedback>
                                                </MemoEdit>
                                            </Field>
                                        </Validation>
                                    </Column>
                                </Row>
                                <Row>
                                    <Column ColumnSize="ColumnSize.Is6">
                                        <Validation>
                                            <Field>
                                                <FieldLabel>@LanguageHelper.GetTitle(langQueryList, 10202)</FieldLabel>
                                                <DateEdit TValue="DateTime" @bind-Date="@languageHead.DateFrom" InputMode="DateInputMode.Date">
                                                    <Feedback>
                                                        <ValidationError />
                                                    </Feedback>
                                                </DateEdit>
                                            </Field>
                                        </Validation>
                                    </Column>
                                    <Column ColumnSize="ColumnSize.Is6">
                                        <Validation>
                                            <Field>
                                                <FieldLabel>@LanguageHelper.GetTitle(langQueryList, 10203)</FieldLabel>
                                                <DateEdit TValue="DateTime" @bind-Date="@languageHead.DateTo" InputMode="DateInputMode.Date">
                                                    <Feedback>
                                                        <ValidationError />
                                                    </Feedback>
                                                </DateEdit>
                                            </Field>
                                        </Validation>
                                    </Column>
                                </Row>
                            </Validations>
                            <Row>
                                <Column ColumnSize="ColumnSize.Is6">
                                    <Field>
                                        <FieldLabel>@LanguageHelper.GetTitle(langQueryList, 10201)</FieldLabel>
                                        <SelectList TItem="SelectListModel" TValue="string" Data="@StatusSelectListValues" TextField="@((item) => item.DescriptionField)" ValueField="@((item) => item.ValueField)" SelectedValue="@languageHead.Status" SelectedValueChanged="@StatusListValueChangedHandler" />
                                    </Field>
                                </Column>
                            </Row>
                        </CardBody>
                    </Card>
                </Column>
            </Row>
        </Form>
        <Row>
            <Column>
                <Card Margin="Margin.Is4.OnY">
                    <CardHeader>
                        <CardTitle>@LanguageHelper.GetTitle(langQueryList, 10706)</CardTitle>
                    </CardHeader>
                    <CardBody>
                        @if (languageHead.LanguageItems != null)
                        {
                            <DataGrid TItem="LangItem"
                                      Data="@languageHead.LanguageItems"
                                      Filterable="true"
                                      FilterMethod="DataGridFilterMethod.StartsWith"
                                      PageSize="25"
                                      Striped="true"
                                      Bordered="true"
                                      Hoverable="true"
                                      Responsive="true"
                                      ShowPager="true"
                                      PagerPosition="DataGridPagerPosition.Bottom"
                                      ShowPageSizes="true"
                                      Editable="true"
                                      EditMode="DataGridEditMode.Form">
                                <EmptyTemplate>No records...</EmptyTemplate>
                                <DataGridColumns>
                                    <DataGridCommandColumn TItem="LangItem" Width="170px">
                                        <NewCommandTemplate>
                                            <Button Color="Color.Success" Clicked="@context.Clicked">New</Button>
                                        </NewCommandTemplate>
                                        <EditCommandTemplate>
                                            <Button Color="Color.Primary" Clicked="@context.Clicked">Edit</Button>
                                        </EditCommandTemplate>
                                        <SaveCommandTemplate>
                                            <Button Color="Color.Primary" Clicked="@context.Clicked">Apply</Button>
                                        </SaveCommandTemplate>
                                        <DeleteCommandTemplate>
                                            @*<Button Color="Color.Danger" Clicked="@context.Clicked">Delete</Button>*@
                                        </DeleteCommandTemplate>
                                        <CancelCommandTemplate>
                                            <Button Color="Color.Secondary" Clicked="@context.Clicked">Cancel</Button>
                                        </CancelCommandTemplate>
                                        <ClearFilterCommandTemplate>
                                            <Button Color="Color.Warning" Clicked="@context.Clicked">Clear Filter</Button>
                                        </ClearFilterCommandTemplate>
                                    </DataGridCommandColumn>

                                    <DataGridColumn TItem="LangItem" Field="@nameof(LangItem.LanguageCodeId)" Caption="@LanguageHelper.GetTitle(langQueryList, 10707)" Editable="true">
                                        <EditTemplate>
                                            <SelectList TItem="SelectListModel" TValue="string" Data="@LanguageCodeSelectListValues" TextField="@((item)=>item.DescriptionField)" ValueField="@((item)=>item.ValueField)" SelectedValue="@((string)( context.CellValue ))" SelectedValueChanged="@(e => { context.CellValue = e; })" />
                                        </EditTemplate>
                                    </DataGridColumn>
                                    <DataGridColumn TItem="LangItem" Field="@nameof(LangItem.Text)" Caption="@LanguageHelper.GetTitle(langQueryList, 10703)" Editable="true" />
                                    <DataGridDateColumn TItem="LangItem" Field="@nameof(LangItem.DateFrom)" DisplayFormat="{0:dd.MM.yyyy}" Caption="@LanguageHelper.GetTitle(langQueryList, 10202)" Editable="true" />
                                    <DataGridDateColumn TItem="LangItem" Field="@nameof(LangItem.DateTo)" DisplayFormat="{0:dd.MM.yyyy}" Caption="@LanguageHelper.GetTitle(langQueryList, 10203)" Editable="true" />
                                    <DataGridColumn TItem="LangItem" Field="@nameof(LangItem.Status)" Caption="@LanguageHelper.GetTitle(langQueryList, 10201)" Editable="true">
                                        <EditTemplate>
                                            <SelectList TItem="SelectListModel" TValue="string" Data="@StatusSelectListValues" TextField="@((item)=>item.DescriptionField)" ValueField="@((item)=>item.ValueField)" SelectedValue="@((string)( context.CellValue ))" SelectedValueChanged="@(e => { context.CellValue = e; })" />
                                        </EditTemplate>
                                    </DataGridColumn>
                                </DataGridColumns>
                            </DataGrid>
                        }
                        else
                        {
                            <p>Loading...</p>
                        }
                    </CardBody>
                </Card>
            </Column>
        </Row>
        <Row>
            <Column>
                <Card Margin="Margin.Is4.OnY">
                    <CardBody>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is12">
                                <Alert Color="(Color)alertModel.AlertType" @bind-Visible="@alertModel.ShowAlert" Dismisable="true">
                                    <AlertMessage>
                                        @alertModel.AlertMessage
                                    </AlertMessage>
                                    <AlertDescription>
                                        @alertModel.AlertDescription
                                    </AlertDescription>
                                    <CloseButton />
                                </Alert>
                            </Column>
                        </Row>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is4">
                                @if (languageHead.Id == Guid.Empty)
                                {
                                    <Button Type="ButtonType.Submit" Color="Color.Primary" PreventDefaultOnSubmit="true" Clicked="@SubmitForm" Loading="@SavingTextCode">@LanguageHelper.GetTitle(langQueryList, 10704)</Button>
                                }
                                else
                                {
                                    <Button Type="ButtonType.Submit" Color="Color.Primary" PreventDefaultOnSubmit="true" Clicked="@SubmitForm" Loading="@SavingTextCode">@LanguageHelper.GetTitle(langQueryList, 10705)</Button>
                                }
                            </Column>
                        </Row>
                    </CardBody>
                </Card>
            </Column>
        </Row>
    }
}

@code {
    [Parameter]
    public string Id { get; set; }
    LangQueryList langQueryList { get; set; }
    LangHead languageHead { get; set; }
    PageProgressBar pageProgressBar;
    bool loadingPage = true;
    IEnumerable<SelectListModel> StatusSelectListValues { get; set; }
    IEnumerable<SelectListModel> LanguageCodeSelectListValues { get; set; }
    AlertModel alertModel = new AlertModel();
    bool SavingTextCode = false;
    bool textCodeEdit = false;

    protected override async Task OnInitializedAsync()
    {
        await GetLanguageList();
        await CreateSelectListModels();
        await GetLanguageHead();
        loadingPage = false;
        pageProgressBar.ChangeVisibility(loadingPage);
    }

    private async Task GetLanguageList()
    {
        var textCodes = new List<long>();
        textCodes.Add(10121);
        textCodes.Add(10700);
        textCodes.Add(10500);
        textCodes.Add(10501);
        textCodes.Add(10701);
        textCodes.Add(10702);
        textCodes.Add(10200);
        textCodes.Add(10202);
        textCodes.Add(10203);
        textCodes.Add(10201);
        textCodes.Add(10703);
        textCodes.Add(10704);
        textCodes.Add(10705);
        textCodes.Add(10706);
        textCodes.Add(10707);
        textCodes.Add(10708);

        langQueryList = await MyFoundationService.GetLanguageInfo(TokenProvider.AccessToken, UserAppCache.LanguageCode, textCodes.ToArray());
    }

    private string GetBreadCrumbTitle()
    {
        if (languageHead == null)
            return string.Empty;

        if (languageHead.Id == Guid.Empty)
            return LanguageHelper.GetTitle(langQueryList, 10119);

        return languageHead.TextCode.ToString();
    }

    private async Task CreateSelectListModels()
    {
        StatusTypes statusTypes = new StatusTypes();
        StatusSelectListValues = statusTypes.GetStatusTypesDictionary().Select(s => new SelectListModel { ValueField = s.Key, DescriptionField = s.Value });

        await CreateLanguageCodeSelectList();
    }

    private async Task CreateLanguageCodeSelectList()
    {
        var response = await MyFoundationService.MakeAPICallAsync(TokenProvider.AccessToken, HttpMethod.Get, APITypes.FOUNDATION, $"Language/Code");

        Dictionary<string, string> LanguageCodeDictionary = new Dictionary<string, string>();

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            LangCodeList langCodeList = response.ContentAsType<LangCodeList>();

            foreach (var langCode in langCodeList.LanguageCodes.OrderBy(l => l.LanguageCodeId))
            {
                LanguageCodeDictionary.Add(langCode.LanguageCodeId, langCode.LanguageCodeId);
            }
        }

        LanguageCodeSelectListValues = LanguageCodeDictionary.Select(s => new SelectListModel { ValueField = s.Key, DescriptionField = s.Value });
    }

    private async Task GetLanguageHead()
    {
        languageHead = new LangHead();
        languageHead.Id = Guid.Empty;

        if (!string.IsNullOrWhiteSpace(Id))
        {
            var response = await MyFoundationService.MakeAPICallAsync(TokenProvider.AccessToken, HttpMethod.Get, APITypes.FOUNDATION, $"Language/{Id}");

            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                languageHead = response.ContentAsType<LangHead>();
                textCodeEdit = true;
            }
        }
    }

    private void StatusListValueChangedHandler(string newValue)
    {
        languageHead.Status = newValue;
    }

    private async Task SubmitForm()
    {
        SavingTextCode = true;
        var saveResult = await SaveTextCodeAsync();

        alertModel.ShowAlert = true;
        alertModel.AlertType = saveResult.Item1 ? (int)Color.Success : (int)Color.Danger;
        alertModel.AlertMessage = saveResult.Item2;
        SavingTextCode = false;
    }

    private async Task<Tuple<bool, string>> SaveTextCodeAsync()
    {
        if (languageHead != null)
        {
            if (languageHead.Id != Guid.Empty)
            {
                var response = await MyFoundationService.MakeAPICallAsync(TokenProvider.AccessToken, HttpMethod.Get, APITypes.FOUNDATION, $"Language/{languageHead.Id}");//_apiHelper.MakeAPICallAsync(apiAccessToken, HttpMethod.Get, APITypes.CUSTOMFIELD, $"CustomFieldGroup/{customFieldGroupHead.Id}");

                if (response.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    var foundLangHead = response.ContentAsType<LangHead>();

                    if (foundLangHead != null)
                    {
                        var processPatchResult = await MyFoundationService.ProcessPatch(foundLangHead, languageHead, foundLangHead.Id, TokenProvider.AccessToken, APITypes.FOUNDATION, "Language");
                        if (!processPatchResult.Item1)
                        {
                            return processPatchResult;
                        }

                        foreach (var languageItem in languageHead.LanguageItems)
                        {
                            if (languageItem.Id == Guid.Empty)
                                languageItem.LanguageHeaderId = languageHead.Id;

                            var languageItemResponse = await CreateOrUpdateLanguageItemAsync(languageItem);

                            if (!languageItemResponse.Item1)
                                return languageItemResponse;
                        }
                    }
                }
            }
            else
            {
                HttpContent contentPost = new StringContent(JsonConvert.SerializeObject(languageHead), Encoding.UTF8, "application/json");

                try
                {
                    var response = await MyFoundationService.MakeAPICallAsync(TokenProvider.AccessToken, HttpMethod.Post, APITypes.FOUNDATION, $"Language", contentPost);//_apiHelper.MakeAPICallAsync(apiAccessToken, HttpMethod.Post, APITypes.TEAM, $"Team", contentPost);

                    if (response.StatusCode != System.Net.HttpStatusCode.Created)
                    {
                        return new Tuple<bool, string>(false, await MyFoundationService.GetErrorFromResponse(response));
                    }

                    languageHead = response.ContentAsType<LangHead>();
                }
                catch (Exception ex)
                {
                    return new Tuple<bool, string>(false, $"Error calling API: {ex.Message}");
                }
            }

            return new Tuple<bool, string>(true, $"Text code {languageHead.TextCode} saved");
        }

        return new Tuple<bool, string>(false, $"No text code to save");
    }

    private async Task<Tuple<bool, string>> CreateOrUpdateLanguageItemAsync(LangItem languageItem)
    {
        if (languageItem != null)
        {
            if (languageItem.Id != Guid.Empty)
            {
                var response = await MyFoundationService.MakeAPICallAsync(TokenProvider.AccessToken, HttpMethod.Get, APITypes.FOUNDATION, $"Language/Item/{languageItem.Id}");//_apiHelper.MakeAPICallAsync(apiAccessToken, HttpMethod.Get, APITypes.CUSTOMFIELD, $"CustomField/{customFieldHead.Id}");

                if (response.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    var foundLanguageItem = response.ContentAsType<LangItem>();

                    if (foundLanguageItem != null)
                    {
                        var processPatchResult = await MyFoundationService.ProcessPatch(foundLanguageItem, languageItem, foundLanguageItem.Id, TokenProvider.AccessToken, APITypes.FOUNDATION, "Language/Item");

                        if (!processPatchResult.Item1)
                        {
                            return processPatchResult;
                        }
                    }
                }
            }
            else
            {
                HttpContent contentPost = new StringContent(JsonConvert.SerializeObject(languageItem), Encoding.UTF8, "application/json");

                try
                {
                    var response = await MyFoundationService.MakeAPICallAsync(TokenProvider.AccessToken, HttpMethod.Post, APITypes.FOUNDATION, $"Language/Item", contentPost);//_apiHelper.MakeAPICallAsync(apiAccessToken, HttpMethod.Post, APITypes.CLIENT, $"Address", contentPost);

                    if (response.StatusCode != System.Net.HttpStatusCode.Created)
                    {
                        return new Tuple<bool, string>(false, await MyFoundationService.GetErrorFromResponse(response));
                    }
                }
                catch (Exception ex)
                {
                    return new Tuple<bool, string>(false, $"Error calling API: {ex.Message}");
                }
            }

            return new Tuple<bool, string>(true, $"Language item saved");
        }

        return new Tuple<bool, string>(false, $"No Language item to save");
    }
}

