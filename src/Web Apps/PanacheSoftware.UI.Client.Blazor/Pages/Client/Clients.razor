@page "/client/clients"
@attribute [Authorize]
@inject FoundationService MyFoundationService
@inject TokenProvider TokenProvider
@inject IJSRuntime JSRuntime
@using PanacheSoftware.Core.Domain.API.Client;

<div id="overlay" class="overlay"></div>
<div class="container-fluid p-5">
    <div class="row">
        <div class="form-group col-md-12">
            <div class="breadcrumb-container">
                <a id="toggle-sidebar" class="btn btn-outline-secondary btn-sm breadcrumb-button" href="#"><i class="fa fa-bars"></i></a>
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-page="/Dashboard/Index">@LanguageHelper.GetTitle(langQueryList, 10121)</a></li>
                    <li class="breadcrumb-item active">@LanguageHelper.GetTitle(langQueryList, 10105)</li>
                </ol>
            </div>
        </div>
    </div>
    <form method="post">
        <div class="row">
            <div class="col-md-12">
                <div class="card border-light mb-6">
                    <div class="card-header">@LanguageHelper.GetTitle(langQueryList, 10105)</div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-12">
                                <table id="" class="table table-striped table-bordered" style="width:100%">
                                    <thead>
                                        <tr>
                                            <th></th>
                                            <th><span @onclick="@(() => Sort("ShortName"))">@LanguageHelper.GetTitle(langQueryList, 10301)</span><i class="@(SortIndicator("ShortName"))"></i></th>
                                            <th><span @onclick="@(() => Sort("LongName"))">@LanguageHelper.GetTitle(langQueryList, 10302)</span><i class="@(SortIndicator("LongName"))"></i></th>
                                            <th>@LanguageHelper.GetTitle(langQueryList, 10200)</th>
                                            <th>@LanguageHelper.GetTitle(langQueryList, 10201)</th>
                                            <th>@LanguageHelper.GetTitle(langQueryList, 10202)</th>
                                            <th>@LanguageHelper.GetTitle(langQueryList, 10203)</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (clientList != null)
                                        {
                                            @foreach (var currentClient in clientList.Items)
                                            {
                                                <tr>
                                                    <td>
                                                        <a href="/Client/Index" asp-route-id="@currentClient.Id" class="btn btn-primary btn-sm"><i class="fa fa-edit"></i></a>
                                                    </td>
                                                    <td>@currentClient.ShortName</td>
                                                    <td>@currentClient.LongName</td>
                                                    <td>@currentClient.Description</td>
                                                    <td>@currentClient.Status</td>
                                                    <td>@currentClient.DateFrom.ToShortDateString()</td>
                                                    <td>@currentClient.DateTo.ToShortDateString()</td>
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr><td colspan="7">Loading...</td></tr>
                                        }
                                    </tbody>
                                </table>
                                @if (clientList != null)
                                {
                                    <Pager PageIndex=@clientList.PageIndex TotalPages=@clientList.TotalPages OnClick="PageIndexChanged"
                                            HasNextPage=@clientList.HasNextPage HasPreviousPage=@clientList.HasPreviousPage>
                                    </Pager>
                                }
                                <div class="float-left">
                                    <a class="btn btn-primary" href="/Client/Index">@LanguageHelper.GetTitle(langQueryList, 10204)</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

@code {
    LangQueryList langQueryList { get; set; }
    Paginated<ClientHead> clientList { get; set; }
    int pageNumber = 1;
    string currentSortField = "ShortName";
    string currentSortOrder = SortOrders.Ascending;

    protected override async Task OnInitializedAsync()
    {
        await GetLanguageList();
    }

    private async Task GetLanguageList()
    {
        var textCodes = new List<long>();
        textCodes.Add(10121);
        textCodes.Add(10105);
        textCodes.Add(10301);
        textCodes.Add(10302);
        textCodes.Add(10200);
        textCodes.Add(10201);
        textCodes.Add(10202);
        textCodes.Add(10203);
        textCodes.Add(10204);

        langQueryList = await MyFoundationService.GetLanguageInfo(TokenProvider.AccessToken, textCodes.ToArray());

        await GetClients(1, "ShortName", SortOrders.Ascending, 1);

        StateHasChanged();
    }

    private async Task GetClients(int pageNumber, string sortField, string sortOrder, int pageSize)
    {
        var response = await MyFoundationService.MakeAPICallAsync(TokenProvider.AccessToken, HttpMethod.Get, APITypes.CLIENT, $"Client/GetPaginatedClients?pageNumber={pageNumber}&sortField={sortField}&sortOrder={sortOrder}&pageSize={pageSize}");

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            clientList = response.ContentAsType<Paginated<ClientHead>>();
        }
        else
        {
            clientList = null;
        }
    }

    private async Task Sort(string sortField)
    {
        if (sortField.Equals(currentSortField))
        {
            currentSortOrder = currentSortOrder.Equals(SortOrders.Ascending) ? SortOrders.Descending : SortOrders.Ascending;
        }
        else
        {
            currentSortField = sortField;
            currentSortOrder = SortOrders.Ascending;
        }
        await GetClients(1, currentSortField, currentSortOrder, 1);
        StateHasChanged();
    }

    private string SortIndicator(string sortField)
    {
        if (sortField.Equals(currentSortField))
        {
            return currentSortOrder.Equals(SortOrders.Ascending) ? "fas fa-sort-up" : "fas fa-sort-down";
        }
        return string.Empty;
    }

    public async void PageIndexChanged(int newPageNumber)
    {
        if (newPageNumber < 1 || newPageNumber > clientList.TotalPages)
        {
            return;
        }
        pageNumber = newPageNumber;
        await GetClients(pageNumber, currentSortField, currentSortOrder, 1);
        StateHasChanged();
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/datatables/jquery.dataTables.min.js");
    //    await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/datatables/dataTables.bootstrap4.min.js");
    //    await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/datatables/responsive.bootstrap4.min.js");
    //    await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/datatables/dataTables.responsive.min.js");
    //    await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/panache/pl-datatable.js");
    //    //await JSRuntime.InvokeVoidAsync("PLregisterDataTables");
    //}
}
