@attribute [Authorize]
@inject UserAppCache UserAppCache
@inject FoundationService MyFoundationService
@inject TokenProvider TokenProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@using PanacheSoftware.Core.Domain.API.Task

@if (taskHead != null)
{
    <Modal @ref="taskForm">
        <ModalContent Centered="true" Size="ModalSize.Large">
            <ModalHeader>
                <ModalTitle>
                    <Icon Name="IconName.Edit" />
                    @LanguageHelper.GetTitle(langQueryList, 10935)
                </ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Validations Mode="ValidationMode.Auto" Model="@taskHead">
                    <Row>
                        <Column ColumnSize="ColumnSize.Is6">
                            <Validation>
                                <Field>
                                    <FieldLabel>@LanguageHelper.GetTitle(langQueryList, 10900)</FieldLabel>
                                    <TextEdit @bind-Text="taskHead.Title">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </Field>
                            </Validation>
                        </Column>
                    </Row>
                    <Row>
                        <Column ColumnSize="ColumnSize.Is12">
                            <Validation>
                                <Field>
                                    <FieldLabel>@LanguageHelper.GetTitle(langQueryList, 10200)</FieldLabel>
                                    <MemoEdit @bind-Text="@taskHead.Description" Rows="5">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </MemoEdit>
                                </Field>
                            </Validation>
                        </Column>
                    </Row>
                    <Row>
                        <Column ColumnSize="ColumnSize.Is6">
                            <Field>
                                <FieldLabel>@LanguageHelper.GetTitle(langQueryList, 10222)</FieldLabel>
                                <DateEdit TValue="DateTime" @bind-Date="@taskHead.StartDate" InputMode="DateInputMode.Date">
                                </DateEdit>
                            </Field>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is6">
                            <Field>
                                <FieldLabel>@LanguageHelper.GetTitle(langQueryList, 10911)</FieldLabel>
                                <DateEdit TValue="DateTime" @bind-Date="@taskHead.CompletionDate" InputMode="DateInputMode.Date">
                                </DateEdit>
                            </Field>
                        </Column>
                    </Row>
                    <Row>
                        <Column ColumnSize="ColumnSize.Is6">
                            <Field>
                                <FieldLabel>@LanguageHelper.GetTitle(langQueryList, 10905)</FieldLabel>
                                <SelectList TItem="SelectListModel" TValue="string" Data="@UserSelectListValues" TextField="@((item) => item.DescriptionField)" ValueField="@((item) => item.ValueField)" SelectedValue="@GetMainUser()" SelectedValueChanged="@UserListValueChangedHandler" />
                            </Field>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is6">
                            <Field>
                                <FieldLabel>@LanguageHelper.GetTitle(langQueryList, 10201)</FieldLabel>
                                <SelectList TItem="SelectListModel" TValue="string" Data="@StatusSelectListValues" TextField="@((item) => item.DescriptionField)" ValueField="@((item) => item.ValueField)" SelectedValue="@taskHead.Status" SelectedValueChanged="@StatusListValueChangedHandler" />
                            </Field>
                        </Column>
                    </Row>
                </Validations>
                <Row>
                    <Column>
                        <CustomFieldGroupLink @ref="customFieldGroupLink" linkId="taskHead.Id" linkType="@LinkTypes.Task" CustomFieldGroupChange="@CustomFieldGroupsChanged" />
                    </Column>
                </Row>
            </ModalBody>
            <ModalFooter>
                <Row>
                    <Column ColumnSize="ColumnSize.Is12">
                        <PLAlert includeSnackBar="true" includeAlert="true" @ref="plAlert" />
                    </Column>
                </Row>
                <Row>
                    <Column ColumnSize="ColumnSize.Is12">
                        <Button Color="Color.Secondary" Clicked="@HideTaskForm">@LanguageHelper.GetTitle(langQueryList, 10942)</Button>
                        <Button Color="Color.Primary" Clicked="@SubmitForm" Loading="@SavingTaskHead">@LanguageHelper.GetTitle(langQueryList, 10229)</Button>
                    </Column>
                </Row>
            </ModalFooter>
        </ModalContent>
    </Modal>

    <Button Color="Color.Primary" Clicked="@ShowTaskForm">@ActionButtonTitle</Button>
}


@code {
    [CascadingParameter]
    LangQueryList langQueryList { get; set; }

    [Parameter]
    public TaskHead taskHead { get; set; }

    [Parameter]
    public EventCallback<TaskHead> TaskItemCreated { get; set; }

    [Parameter]
    public EventCallback<TaskHead> TaskItemUpdated { get; set; }

    [Parameter]
    public EventCallback<Task> CustomFieldGroupChange { get; set; }

    [Parameter]
    public string ActionButtonTitle { get; set; }

    [Parameter]
    public TaskHead resetTaskHead { get; set; }

    [Parameter]
    public bool CreationForm { get; set; }


    [CascadingParameter(Name = "StatusSelectListValues")]
    IEnumerable<SelectListModel> StatusSelectListValues { get; set; }
    [CascadingParameter(Name = "TeamSelectListValues")]
    IEnumerable<SelectListModel> TeamSelectListValues { get; set; }
    [CascadingParameter(Name = "UserSelectListValues")]
    IEnumerable<SelectListModel> UserSelectListValues { get; set; }
    private Modal taskForm;
    bool SavingTaskHead = false;
    PLAlert plAlert { get; set; }
    CustomFieldGroupLink customFieldGroupLink;

    protected override void OnInitialized()
    {

    }

    //public void ResetTask(TaskHead taskHeadReset)
    //{
    //    if (taskHeadReset == null)
    //        return;

    //    taskHead = taskHeadReset;
    //    StateHasChanged();
    //}

    private void UserListValueChangedHandler(string newValue)
    {
        if (Guid.TryParse(newValue, out Guid newId))
        {
            taskHead.MainUserId = newId;
        }
        else
        {
            taskHead.MainUserId = Guid.Empty;
        }
    }

    private void StatusListValueChangedHandler(string newValue)
    {
        taskHead.Status = newValue;
    }

    private string GetMainUser()
    {
        if (taskHead == default)
            return string.Empty;

        return taskHead.MainUserId.ToString();
    }

    private void ShowTaskForm()
    {
        if (CreationForm)
            taskHead = resetTaskHead;

        taskForm.Show();
    }

    private void HideTaskForm()
    {
        taskForm.Hide();
    }

    private void HideMessages()
    {
        plAlert.HideAlert();
    }

    private async Task SubmitForm()
    {
        SavingTaskHead = true;

        var currentId = taskHead.Id;

        var saveResult = await SaveTaskHeadAsync();

        plAlert.ShowAlert(saveResult.Item1, saveResult.Item2);

        if (saveResult.Item1)
        {
            await customFieldGroupLink.SaveFieldGroup(taskHead.Id);

            if (currentId == Guid.Empty)
            {
                await TaskItemCreated.InvokeAsync(taskHead);
            }
            else
            {
                await TaskItemUpdated.InvokeAsync(taskHead);
            }

            if(resetTaskHead != default)
            {
                taskHead = resetTaskHead;
            }

            customFieldGroupLink.ResetCustomFieldGroupLinks();
            HideMessages();
            HideTaskForm();
        }

        SavingTaskHead = false;
    }

    private async Task<Tuple<bool, string>> SaveTaskHeadAsync()
    {
        if (taskHead != null)
        {
            if (taskHead.Id != Guid.Empty)
            {
                var response = await MyFoundationService.MakeAPICallAsync(TokenProvider.AccessToken, HttpMethod.Get, APITypes.TASK, $"Task/{taskHead.Id}");

                if (response.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    var foundTaskHead = response.ContentAsType<TaskHead>();

                    if (foundTaskHead != null)
                    {
                        var processPatchResult = await MyFoundationService.ProcessPatch(foundTaskHead, taskHead, foundTaskHead.Id, TokenProvider.AccessToken, APITypes.TASK, "Task");
                        if (!processPatchResult.Item1)
                        {
                            return processPatchResult;
                        }

                        response = await MyFoundationService.MakeAPICallAsync(TokenProvider.AccessToken, HttpMethod.Get, APITypes.TASK, $"Task/Detail/{taskHead.TaskDetail.Id}");

                        if (response.StatusCode == System.Net.HttpStatusCode.OK)
                        {
                            var foundTaskDet = response.ContentAsType<TaskDet>();

                            if (foundTaskDet != null)
                            {
                                processPatchResult = await MyFoundationService.ProcessPatch(foundTaskDet, taskHead.TaskDetail, foundTaskDet.Id, TokenProvider.AccessToken, APITypes.TASK, "Task/Detail");
                                if (!processPatchResult.Item1)
                                {
                                    return processPatchResult;
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                HttpContent contentPost = new StringContent(JsonConvert.SerializeObject(taskHead), Encoding.UTF8, "application/json");

                try
                {
                    var response = await MyFoundationService.MakeAPICallAsync(TokenProvider.AccessToken, HttpMethod.Post, APITypes.TASK, $"Task", contentPost);

                    if (response.StatusCode != System.Net.HttpStatusCode.Created)
                    {
                        return new Tuple<bool, string>(false, MyFoundationService.GetErrorFromResponse(response));
                    }

                    taskHead = response.ContentAsType<TaskHead>();
                }
                catch (Exception ex)
                {
                    return new Tuple<bool, string>(false, $"Error calling API: {ex.Message}");
                }
            }

            return new Tuple<bool, string>(true, $"Task {taskHead.Title} saved");
        }

        return new Tuple<bool, string>(false, $"No task to save");
    }

    void CustomFieldGroupsChanged()
    {
        CustomFieldGroupChange.InvokeAsync(); 
    }

}
