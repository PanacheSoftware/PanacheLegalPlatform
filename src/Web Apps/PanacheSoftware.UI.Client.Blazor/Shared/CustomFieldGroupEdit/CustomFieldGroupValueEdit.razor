@attribute [Authorize]
@inject UserAppCache UserAppCache
@inject FoundationService MyFoundationService
@inject TokenProvider TokenProvider
@inject IMapper Mapper
@using PanacheSoftware.Core.Domain.API.CustomField

@if (customFieldGroupValuesModel != null)
{
    <Card Margin="Margin.Is4.OnY">
        <CardHeader>
            <CardTitle>@customFieldGroupValuesModel.customFieldGroupHeader.LongName</CardTitle>
        </CardHeader>
        <CardBody>

            @foreach (var customFieldRow in CustomFieldRows)
            {
                <Row>

                    @foreach (var customFieldHeaderRowField in customFieldRow.CustomFieldHeaderRowFields)
                    {
                        <Column ColumnSize="ColumnSize.Is6">
                            <Field>
                                @if (customFieldHeaderRowField.customFieldHeader.CustomFieldType != CustomFieldTypes.BoolField)
                                {
                                    <FieldLabel>@customFieldHeaderRowField.customFieldHeader.Name</FieldLabel>
                                }

                                @switch (customFieldHeaderRowField.customFieldHeader.CustomFieldType)
                                {
                                    case CustomFieldTypes.DateTimeField:
                                        <DateEdit TValue="DateTime" @bind-Date="@customFieldHeaderRowField.customFieldValue.DateTimeValue" InputMode="DateInputMode.Date" ReadOnly="@ReadOnly"></DateEdit>
                                        break;
                                    case CustomFieldTypes.IntField:
                                        <NumericEdit @bind-Value="@customFieldHeaderRowField.customFieldValue.IntValue" ReadOnly="@ReadOnly"></NumericEdit>
                                        break;
                                    case CustomFieldTypes.DoubleField:
                                        <NumericEdit @bind-Value="@customFieldHeaderRowField.customFieldValue.DoubleValue" ReadOnly="@ReadOnly"></NumericEdit>
                                        break;
                                    case CustomFieldTypes.BoolField:
                                        <Check TValue="bool" @bind-Checked="@customFieldHeaderRowField.customFieldValue.BoolValue" ReadOnly="@ReadOnly">@customFieldHeaderRowField.customFieldHeader.Name</Check>
                                        break;
                                    case CustomFieldTypes.StringField:
                                    default:
                                        <TextEdit @bind-Text="@customFieldHeaderRowField.customFieldValue.StringValue" ReadOnly="@ReadOnly"></TextEdit>
                                        break;
                                }
                            </Field>
                        </Column>
                    }
                </Row>
            }

            @if (!ReadOnly)
            {
                <Row>
                    <Column ColumnSize="ColumnSize.Is12">
                        <PLAlert includeSnackBar="true" includeAlert="false" @ref="plAlert" />
                    </Column>
                </Row>
                <Row>
                    <Column ColumnSize="ColumnSize.Is12">
                        <Button Type="ButtonType.Submit" Color="Color.Primary" PreventDefaultOnSubmit="true" Clicked="@SaveFieldGroupValues" Loading="@SavingFieldGroup">@LanguageHelper.GetTitle(langQueryList, 10229)</Button>
                    </Column>
                </Row>
            }
        </CardBody>
    </Card>
}

@code {

    [CascadingParameter]
    LangQueryList langQueryList { get; set; }

    [Parameter]
    public CustomFieldGroupValuesModel customFieldGroupValuesModel { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    bool SavingFieldGroup = false;
    PLAlert plAlert { get; set; }

    int fieldRowMax = 2;
    List<CustomFieldHeaderRow> CustomFieldRows = new List<CustomFieldHeaderRow>();

    protected override async Task OnInitializedAsync()
    {
        CustomFieldRows = GetRows();
    }

    private async Task SaveFieldGroupValues()
    {
        SavingFieldGroup = true;
        var saveResult = await SaveCustomFieldValuesAsync();

        plAlert.ShowAlert(saveResult.Item1, saveResult.Item2);

        SavingFieldGroup = false;
    }

    private void HideMessages()
    {
        plAlert.HideAlert();
    }

    private async Task<Tuple<bool, string>> SaveCustomFieldValuesAsync()
    {
        if (CustomFieldRows.Any())
        {
            foreach (var customFieldRow in CustomFieldRows)
            {
                foreach (var customField in customFieldRow.CustomFieldHeaderRowFields)
                {
                    if (customField.customFieldValue.Id != Guid.Empty)
                    {
                        var response = await MyFoundationService.MakeAPICallAsync(TokenProvider.AccessToken, HttpMethod.Get, APITypes.CUSTOMFIELD, $"CustomFieldValue/{customField.customFieldValue.Id}");

                        if (response.StatusCode == System.Net.HttpStatusCode.OK)
                        {
                            var foundCustomFieldValue = response.ContentAsType<CustomFieldVal>();

                            var processPatchResult = await MyFoundationService.ProcessPatch(foundCustomFieldValue, Mapper.Map<CustomFieldVal>(customField.customFieldValue), foundCustomFieldValue.Id, TokenProvider.AccessToken, APITypes.CUSTOMFIELD, "CustomFieldValue");

                            if (!processPatchResult.Item1)
                            {
                                return processPatchResult;
                            }
                        }
                    }
                    else
                    {
                        HttpContent contentPost = new StringContent(JsonConvert.SerializeObject(customField.customFieldValue), Encoding.UTF8, "application/json");

                        var content = contentPost.ReadAsStringAsync().Result;

                        try
                        {
                            var response = await MyFoundationService.MakeAPICallAsync(TokenProvider.AccessToken, HttpMethod.Post, APITypes.CUSTOMFIELD, $"CustomFieldValue", contentPost);

                            if (response.StatusCode != System.Net.HttpStatusCode.Created)
                            {
                                return new Tuple<bool, string>(false, await MyFoundationService.GetErrorFromResponse(response));
                            }

                            customField.customFieldValue = Mapper.Map<CustomFieldValMultiType>(response.ContentAsType<CustomFieldVal>());
                        }
                        catch (Exception ex)
                        {
                            return new Tuple<bool, string>(false, $"Error calling API: {ex.Message}");
                        }
                    }
                }
            }

            return new Tuple<bool, string>(true, $"Custom Field Values saved");
        }

        return new Tuple<bool, string>(false, $"No Custom Field Values to save");
    }

    private List<CustomFieldHeaderRow> GetRows()
    {
        var customFieldHeaderRows = new List<CustomFieldHeaderRow>();
        int fieldCounter = 0;
        bool addCurrentRow = false;

        var currentRow = new CustomFieldHeaderRow();

        foreach (var currentCustomFieldHeader in customFieldGroupValuesModel.customFieldGroupHeader.CustomFieldHeaders)
        {
            if (fieldCounter == fieldRowMax)
            {
                customFieldHeaderRows.Add(currentRow);
                fieldCounter = 0;
                currentRow = new CustomFieldHeaderRow();
            }

            var customFieldHeaderRowField = new CustomFieldHeaderRowField()
            {
                customFieldHeader = currentCustomFieldHeader
            };

            var customFieldValue = customFieldGroupValuesModel.CustomFieldValues.Where(v => v.CustomFieldHeaderId == currentCustomFieldHeader.Id).FirstOrDefault();

            if (customFieldValue == default)
            {
                customFieldHeaderRowField.customFieldValue = new CustomFieldValMultiType()
                {
                    CustomFieldHeaderId = customFieldHeaderRowField.customFieldHeader.Id,
                    Id = Guid.Empty,
                    StringValue = string.Empty,
                    LinkId = customFieldGroupValuesModel.LinkId,
                    LinkType = customFieldGroupValuesModel.LinkType
                };
            }
            else
            {
                customFieldHeaderRowField.customFieldValue = Mapper.Map<CustomFieldValMultiType>(customFieldValue);
            }

            currentRow.CustomFieldHeaderRowFields.Add(customFieldHeaderRowField);

            fieldCounter++;

            addCurrentRow = true;
        }

        if (addCurrentRow)
            customFieldHeaderRows.Add(currentRow);

        return customFieldHeaderRows;
    }
}
