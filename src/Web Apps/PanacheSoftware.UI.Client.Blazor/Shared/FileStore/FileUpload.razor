@attribute [Authorize]
@inject UserAppCache UserAppCache
@inject FoundationService MyFoundationService
@inject TokenProvider TokenProvider
@inject IMapper Mapper
@using PanacheSoftware.Core.Domain.API.File
@using PanacheSoftware.Core.Domain.Identity.API
@using PanacheSoftware.Core.Domain.API.Join
@using PanacheSoftware.Core.Domain.API.Team
@using System.IO
@using Microsoft.AspNetCore.Http;
@using System.Net


<Card Margin="Margin.Is4.OnY">
    <CardHeader>
        <CardTitle>@LanguageHelper.GetTitle(langQueryList, 10221)</CardTitle>
    </CardHeader>
    <CardBody>
        <Validations Mode="ValidationMode.Auto" Model="@fileUploadModel.FileHeader.FileDetail">
            <Row>
                <Column ColumnSize="ColumnSize.Is6">
                    <Validation>
                        <Field>
                            <FieldLabel>@LanguageHelper.GetTitle(langQueryList, 10206)</FieldLabel>
                            <TextEdit @bind-Text="fileUploadModel.FileHeader.FileDetail.FileTitle">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                </Column>
                <Column ColumnSize="ColumnSize.Is6">
                    <Validation>
                        <Field>
                            <FieldLabel>@LanguageHelper.GetTitle(langQueryList, 10200)</FieldLabel>
                            <TextEdit @bind-Text="fileUploadModel.FileHeader.FileDetail.Description">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                </Column>
            </Row>
            <Row>
                <Column ColumnSize="ColumnSize.Is4">
                    <Check TValue="bool" @bind-Checked="@fileUploadModel.FileHeader.FileDetail.Automated">@LanguageHelper.GetTitle(langQueryList, 10230)</Check>
                </Column>
            </Row>
            <Row>
                <Column ColumnSize="ColumnSize.Is6">
                    <FileEdit Changed="@OnFileUpload" />
                </Column>
            </Row>
            <Row>
                <Column ColumnSize="ColumnSize.Is6">
                    <Paragraph>Or</Paragraph>
                </Column>
            </Row>
            <Row>
                <Column ColumnSize="ColumnSize.Is6">
                    <Validation>
                        <Field>
                            <FieldLabel>@LanguageHelper.GetTitle(langQueryList, 10939)</FieldLabel>
                            <TextEdit @bind-Text="fileUploadModel.URI">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                </Column>
            </Row>
        </Validations>
        <Row>
            <Column ColumnSize="ColumnSize.Is12">
                <Alert Color="Color.Warning" @bind-Visible="@SavingFile">
                    <Paragraph>
                        Uploading File
                    </Paragraph>
                    <SpinKit Type="SpinKitType.Circle" />
                </Alert>
            </Column>
        </Row>
        <Row>
            <Column ColumnSize="ColumnSize.Is12">
                <Button Color="Color.Primary" Clicked="@SaveVersion" Loading="@SavingFile">@LanguageHelper.GetTitle(langQueryList, 10229)</Button>
            </Column>
        </Row>
        <Row>
            <Column ColumnSize="ColumnSize.Is12">
                <PLAlert includeSnackBar="true" includeAlert="true" @ref="plAlert" />
            </Column>
        </Row>
    </CardBody>
</Card>


@code {

    [CascadingParameter]
    LangQueryList langQueryList { get; set; }

    [Parameter]
    public Guid fileHeaderId { get; set; }

    [Parameter]
    public Guid linkId { get; set; }

    [Parameter]
    public string linkType { get; set; }

    FileUploadModel fileUploadModel { get; set; }

    [Parameter]
    public Action<Tuple<bool, FileHead, FileVer>> FileUploaded { get; set; }

    PLAlert plAlert { get; set; }

    bool SavingFile = false;

    protected override async Task OnInitializedAsync()
    {
        await CreateFileUploadModel();
    }

    private void HideMessages()
    {
        plAlert.HideAlert();
    }

    public async Task ResetFileUpload()
    {

        //HideMessages();
        await CreateFileUploadModel();
    }

    private async Task CreateFileUploadModel()
    {
        fileUploadModel = new FileUploadModel();

        if (fileHeaderId != Guid.Empty)
        {

            var response = await MyFoundationService.MakeAPICallAsync(TokenProvider.AccessToken, HttpMethod.Get, APITypes.FILE, $"File/{fileHeaderId}");

            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                fileUploadModel.FileHeader = response.ContentAsType<FileHead>();
            }
        }

        fileUploadModel.linkId = linkId;
        fileUploadModel.linkType = linkType;
    }

    private async Task OnFileUpload(FileChangedEventArgs e)
    {
        SavingFile = true;

        try
        {
            var OneMb = 1024 * 1024 * 15;
            var file = e.Files.FirstOrDefault();

            if (file == null)
            {
                return;
            }

            var buffer = new byte[OneMb];
            var bufferedStream = new BufferedStream(file.OpenReadStream(long.MaxValue), OneMb);
            var ms = new MemoryStream();

            int readBytes;
            while ((readBytes = await bufferedStream.ReadAsync(buffer, 0, OneMb)) > 0)
            {
                ms.Write(buffer, 0, readBytes);
            }

            fileUploadModel.FormFile = new FormFile(ms, 0, ms.Length, file.Name, file.Name)
            {
                Headers = new HeaderDictionary(),
                ContentType = file.Type
            };

            await SaveVersion();
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
        }
    }

    private async Task SaveVersion()
    {
        SavingFile = true;
        var newUpload = false;

        Tuple<byte[], bool, string> formFileProcessResponse = new Tuple<byte[], bool, string>(new byte[0], true, $"Version processed");

        if(string.IsNullOrWhiteSpace(fileUploadModel.FileHeader.FileDetail.FileTitle) || string.IsNullOrWhiteSpace(fileUploadModel.FileHeader.FileDetail.Description))
        {
            plAlert.ShowAlert(false, $"File Title and Description cannot be blank");
            SavingFile = false;
            return;
        }

        var fileVer = new FileVer()
        {
            FileHeaderId = fileUploadModel.FileHeader.Id
        };

        if (fileUploadModel.FormFile != default)
        {
            var fileSizeSetting = await MyFoundationService.GetSystemSetting(TokenProvider.AccessToken, "FILE_UPLOAD_MAX");
            var fileExtPermitted = await MyFoundationService.GetSystemSetting(TokenProvider.AccessToken, "FILE_UPLOAD_EXT");

            formFileProcessResponse =
                await FileHelpers.ProcessFormFile<FileUploadModel>(
                    fileUploadModel.FormFile, GeneralHelpers.SeperatedListToEnumerable(fileExtPermitted.Value, prefix: ".").ToArray<string>(),
                    long.Parse(fileSizeSetting.Value));

            if (formFileProcessResponse.Item2)
            {
                fileUploadModel.FileHeader.FileDetail.FileExtension = Path.GetExtension(fileUploadModel.FormFile.FileName).ToLowerInvariant();
                fileUploadModel.FileHeader.FileDetail.FileType = fileUploadModel.FormFile.ContentType;

                fileVer.Size = fileUploadModel.FormFile.Length;
                fileVer.UntrustedName = fileUploadModel.FormFile.FileName;
                fileVer.TrustedName = WebUtility.HtmlEncode(fileUploadModel.FormFile.FileName);
                fileVer.Content = formFileProcessResponse.Item1;
                newUpload = true;
            }
        }
        else
        {
            if (!string.IsNullOrWhiteSpace(fileUploadModel.URI))
            {
                fileVer.URI = fileUploadModel.URI;
                fileUploadModel.FileHeader.FileDetail.FileExtension = "URI";
                fileUploadModel.FileHeader.FileDetail.FileType = "URI";
                formFileProcessResponse = new Tuple<byte[], bool, string>(new byte[0], true, $"URI Processed");
                newUpload = true;
            }
            else
            {
                if(fileUploadModel.FileHeader.Id == Guid.Empty)
                {
                    plAlert.ShowAlert(false, $"URI cannot be blank");
                    SavingFile = false;
                    return;
                }
            }
        }

        if (newUpload && fileUploadModel.FileHeader.Id == Guid.Empty)
        {
            fileUploadModel.FileHeader.FileLinks.Add(new FileLnk()
            {
                LinkId = fileUploadModel.linkId,
                LinkType = fileUploadModel.linkType,
                FileHeaderId = fileUploadModel.FileHeader.Id
            });
        }

        if (formFileProcessResponse.Item2)
        {
            if(fileUploadModel.FileHeader.Id == Guid.Empty)
                fileUploadModel.FileHeader.FileVersions.Add(fileVer);

            var saveResult = await CreateOrUpdateFileAsync(newUpload ? fileVer : null);
            plAlert.ShowAlert(saveResult.Item1, saveResult.Item2);
            FileUploaded?.Invoke(new Tuple<bool, FileHead, FileVer>(saveResult.Item1, fileUploadModel.FileHeader, newUpload ? fileUploadModel.FileHeader.FileVersions.OrderByDescending(v => v.VersionNumber).FirstOrDefault() : null));
        }
        else
        {
            plAlert.ShowAlert(formFileProcessResponse.Item2, formFileProcessResponse.Item3);
        }

        SavingFile = false;
    }

    private async Task<Tuple<bool, string>> CreateOrUpdateFileAsync(FileVer fileVer = default)
    {
        if (fileUploadModel.FileHeader != null)
        {
            if (fileUploadModel.FileHeader.Id != Guid.Empty)
            {
                if (fileVer != default)
                {
                    HttpContent contentPost = new StringContent(JsonConvert.SerializeObject(fileVer), Encoding.UTF8, "application/json");

                    var response = await MyFoundationService.MakeAPICallAsync(TokenProvider.AccessToken, HttpMethod.Post, APITypes.FILE, $"File/Version", contentPost);

                    if (response.StatusCode != System.Net.HttpStatusCode.Created)
                    {
                        return new Tuple<bool, string>(false, await MyFoundationService.GetErrorFromResponse(response));
                    }

                    fileUploadModel.FileHeader.FileVersions.Add(response.ContentAsType<FileVer>());
                }

                var responseFileDet = await MyFoundationService.MakeAPICallAsync(TokenProvider.AccessToken, HttpMethod.Get, APITypes.FILE, $"File/Detail/{fileUploadModel.FileHeader.FileDetail.Id}");

                if (responseFileDet.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    var fileDetail = responseFileDet.ContentAsType<FileDet>();

                    if (fileDetail != null)
                    {
                        var processPatchResult = await MyFoundationService.ProcessPatch(fileDetail, fileUploadModel.FileHeader.FileDetail, fileDetail.Id, TokenProvider.AccessToken, APITypes.FILE, "File/Detail");

                        if (!processPatchResult.Item1)
                        {
                            return processPatchResult;
                        }

                        responseFileDet = await MyFoundationService.MakeAPICallAsync(TokenProvider.AccessToken, HttpMethod.Get, APITypes.FILE, $"File/Detail/{fileUploadModel.FileHeader.FileDetail.Id}");

                        if (responseFileDet.StatusCode == System.Net.HttpStatusCode.OK)
                        {
                            fileDetail = responseFileDet.ContentAsType<FileDet>();

                            fileUploadModel.FileHeader.FileDetail = fileDetail;
                        }
                    }
                }
            }
            else
            {
                HttpContent contentPost = new StringContent(JsonConvert.SerializeObject(fileUploadModel.FileHeader), Encoding.UTF8, "application/json");

                try
                {
                    var response = await MyFoundationService.MakeAPICallAsync(TokenProvider.AccessToken, HttpMethod.Post, APITypes.FILE, $"File", contentPost);

                    if (response.StatusCode != System.Net.HttpStatusCode.Created)
                    {
                        return new Tuple<bool, string>(false, await MyFoundationService.GetErrorFromResponse(response));
                    }

                    fileUploadModel.FileHeader = response.ContentAsType<FileHead>();
                }
                catch (Exception ex)
                {
                    return new Tuple<bool, string>(false, $"Error calling API: {ex.Message}");
                }
            }

            return new Tuple<bool, string>(true, $"File/Link uploaded");
        }

        return new Tuple<bool, string>(false, $"No file to upload");
    }
}
