// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PanacheSoftware.Core.Types;
using PanacheSoftware.Identity.Data;

namespace PanacheSoftware.Identity.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200525134739_StandardDBPlusTenant")]
    partial class StandardDBPlusTenant
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "0.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    switch (ActiveProvider)
                    {
                        case DatabaseProviderNameSpace.MSSQL:
                            b.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy",
                                    SqlServerValueGenerationStrategy.IdentityColumn);
                            break;
                        case DatabaseProviderNameSpace.MySQL:
                            b.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int auto_increment");
                            break;
                    }

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(1000)");

                    switch (ActiveProvider)
                    {
                        case DatabaseProviderNameSpace.MSSQL:
                            b.Property<string>("ClaimValue")
                                .HasColumnType("nvarchar(max)");
                            break;
                        case DatabaseProviderNameSpace.MySQL:
                            b.Property<string>("ClaimValue")
                                .HasColumnType("LONGTEXT");
                            break;
                    }

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("IdentityRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    switch (ActiveProvider)
                    {
                        case DatabaseProviderNameSpace.MSSQL:
                            b.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy",
                                    SqlServerValueGenerationStrategy.IdentityColumn);
                            break;
                        case DatabaseProviderNameSpace.MySQL:
                            b.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int auto_increment");
                            break;
                    }

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(1000)");

                    switch (ActiveProvider)
                    {
                        case DatabaseProviderNameSpace.MSSQL:
                            b.Property<string>("ClaimValue")
                                .HasColumnType("nvarchar(max)");
                            break;
                        case DatabaseProviderNameSpace.MySQL:
                            b.Property<string>("ClaimValue")
                                .HasColumnType("LONGTEXT");
                            break;
                    }

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("IdentityUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    switch (ActiveProvider)
                    {
                        case DatabaseProviderNameSpace.MSSQL:
                            b.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");
                            break;
                        case DatabaseProviderNameSpace.MySQL:
                            b.Property<string>("Value")
                                .HasColumnType("LONGTEXT");
                            break;
                    }

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("IdentityUserTokens");
                });

            modelBuilder.Entity("PanacheSoftware.Core.Domain.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    switch (ActiveProvider)
                    {
                        case DatabaseProviderNameSpace.MSSQL:
                            b.Property<string>("ConcurrencyStamp")
                                .IsConcurrencyToken()
                                .HasColumnType("nvarchar(max)");
                            break;
                        case DatabaseProviderNameSpace.MySQL:
                            b.Property<string>("ConcurrencyStamp")
                                .IsConcurrencyToken()
                                .HasColumnType("LONGTEXT");
                            break;
                    }

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("IdentityRoles");
                });

            modelBuilder.Entity("PanacheSoftware.Core.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    switch (ActiveProvider)
                    {
                        case DatabaseProviderNameSpace.MSSQL:
                            b.Property<string>("Base64ProfileImage")
                                .HasColumnType("nvarchar(max)");
                            break;
                        case DatabaseProviderNameSpace.MySQL:
                            b.Property<string>("Base64ProfileImage")
                                .HasColumnType("LONGTEXT");
                            break;
                    }

                    switch (ActiveProvider)
                    {
                        case DatabaseProviderNameSpace.MSSQL:
                            b.Property<string>("ConcurrencyStamp")
                                .IsConcurrencyToken()
                                .HasColumnType("nvarchar(max)");
                            break;
                        case DatabaseProviderNameSpace.MySQL:
                            b.Property<string>("ConcurrencyStamp")
                                .IsConcurrencyToken()
                                .HasColumnType("LONGTEXT");
                            break;
                    }

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    switch (ActiveProvider)
                    {
                        case DatabaseProviderNameSpace.MSSQL:
                            b.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");
                            break;
                        case DatabaseProviderNameSpace.MySQL:
                            b.Property<string>("Description")
                                .HasColumnType("LONGTEXT");
                            break;
                    }

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    switch (ActiveProvider)
                    {
                        case DatabaseProviderNameSpace.MSSQL:
                            b.Property<string>("FirstName")
                                .HasColumnType("nvarchar(max)");
                            break;
                        case DatabaseProviderNameSpace.MySQL:
                            b.Property<string>("FirstName")
                                .HasColumnType("LONGTEXT");
                            break;
                    }

                    switch (ActiveProvider)
                    {
                        case DatabaseProviderNameSpace.MSSQL:
                            b.Property<string>("FullName")
                                .HasColumnType("nvarchar(max)");
                            break;
                        case DatabaseProviderNameSpace.MySQL:
                            b.Property<string>("FullName")
                                .HasColumnType("LONGTEXT");
                            break;
                    }

                    b.Property<Guid>("LastUpdateBy");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    switch (ActiveProvider)
                    {
                        case DatabaseProviderNameSpace.MSSQL:
                            b.Property<string>("PasswordHash")
                                .HasColumnType("nvarchar(max)");
                            break;
                        case DatabaseProviderNameSpace.MySQL:
                            b.Property<string>("PasswordHash")
                                .HasColumnType("LONGTEXT");
                            break;
                    }

                    switch (ActiveProvider)
                    {
                        case DatabaseProviderNameSpace.MSSQL:
                            b.Property<string>("PhoneNumber")
                                .HasColumnType("nvarchar(max)");
                            break;
                        case DatabaseProviderNameSpace.MySQL:
                            b.Property<string>("PhoneNumber")
                                .HasColumnType("LONGTEXT");
                            break;
                    }

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    switch (ActiveProvider)
                    {
                        case DatabaseProviderNameSpace.MSSQL:
                            b.Property<string>("SecurityStamp")
                                .HasColumnType("nvarchar(max)");
                            break;
                        case DatabaseProviderNameSpace.MySQL:
                            b.Property<string>("SecurityStamp")
                                .HasColumnType("LONGTEXT");
                            break;
                    }

                    switch (ActiveProvider)
                    {
                        case DatabaseProviderNameSpace.MSSQL:
                            b.Property<string>("Status")
                                .HasColumnType("nvarchar(max)");
                            break;
                        case DatabaseProviderNameSpace.MySQL:
                            b.Property<string>("Status")
                                .HasColumnType("LONGTEXT");
                            break;
                    }

                    switch (ActiveProvider)
                    {
                        case DatabaseProviderNameSpace.MSSQL:
                            b.Property<string>("Surname")
                                .HasColumnType("nvarchar(max)");
                            break;
                        case DatabaseProviderNameSpace.MySQL:
                            b.Property<string>("Surname")
                                .HasColumnType("LONGTEXT");
                            break;
                    }

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("IdentityUsers");
                });

            modelBuilder.Entity("PanacheSoftware.Core.Domain.Identity.IdentityTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    switch (ActiveProvider)
                    {
                        case DatabaseProviderNameSpace.MSSQL:
                            b.Property<string>("CreatedByEmail")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                            break;
                        case DatabaseProviderNameSpace.MySQL:
                            b.Property<string>("CreatedByEmail")
                                .IsRequired()
                                .HasColumnType("LONGTEXT");
                            break;
                    }

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    switch (ActiveProvider)
                    {
                        case DatabaseProviderNameSpace.MSSQL:
                            b.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");
                            break;
                        case DatabaseProviderNameSpace.MySQL:
                            b.Property<string>("Description")
                                .HasColumnType("LONGTEXT");
                            break;
                    }

                    switch (ActiveProvider)
                    {
                        case DatabaseProviderNameSpace.MSSQL:
                            b.Property<string>("Domain")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                            break;
                        case DatabaseProviderNameSpace.MySQL:
                            b.Property<string>("Domain")
                                .IsRequired()
                                .HasColumnType("LONGTEXT");
                            break;
                    }

                    b.Property<DateTime>("LastUpdateDate");

                    switch (ActiveProvider)
                    {
                        case DatabaseProviderNameSpace.MSSQL:
                            b.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                            break;
                        case DatabaseProviderNameSpace.MySQL:
                            b.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("LONGTEXT");
                            break;
                    }

                    b.HasKey("Id");

                    b.ToTable("IdentityTenants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("PanacheSoftware.Core.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PanacheSoftware.Core.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PanacheSoftware.Core.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("PanacheSoftware.Core.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PanacheSoftware.Core.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PanacheSoftware.Core.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
